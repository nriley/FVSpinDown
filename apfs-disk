#!/usr/bin/python

# usage: apfs-disk <print|mount|eject> <volume name substring> [volume role ...]

import plistlib
import subprocess
import sys

action, vol_name_substring = sys.argv[1:3]
vol_roles_allowed = frozenset(sys.argv[3:])

def output(*args):
    return subprocess.check_output(args).rstrip('\n')

def diskutil(*args):
    return output('/usr/sbin/diskutil', *args)

def volume_passphrase(volume_uuid):
    return output('/usr/bin/security', 'find-generic-password',
                  '-D', 'Encrypted Volume Password',
                  '-s', volume_uuid, '-w').decode('hex').rstrip('\0')

if __name__ == '__main__':
    diskutil_plist = plistlib.readPlistFromString(
        diskutil('apfs', 'list', '-plist'))
    store_volume = {}
    for container_info in diskutil_plist['Containers']:
        physical_store = container_info['DesignatedPhysicalStore']
        for volume_info in container_info['Volumes']:
            volume_roles = frozenset(volume_info['Roles'])
            if volume_roles:
                if not volume_roles.intersection(vol_roles_allowed):
                    continue
            elif vol_roles_allowed:
                continue
            volume_name = volume_info['Name']
            if vol_name_substring in volume_name:
                store_volume.setdefault(physical_store, []).append(dict(
                    name=volume_name,
                    locked=volume_info['Locked'],
                    device=volume_info['DeviceIdentifier'],
                    uuid=volume_info['APFSVolumeUUID']))
    if action == 'eject':
        for store in store_volume.iterkeys():
            diskutil(action, store)
    elif action == 'mount':
        for volumes_info in store_volume.itervalues():
            for volume_info in volumes_info:
                volume = volume_info['device']
                if volume_info['locked']:
                    volume_uuid = volume_info['uuid']
                    passphrase = volume_passphrase(volume_uuid)
                    # XXX note: leaks passphrase on command line
                    diskutil('apfs', 'unlockVolume', volume_uuid,
                             '-passphrase', passphrase)
                else:
                    diskutil('mount', volume)
    else:
        import pprint
        pprint.pprint(store_volume)
